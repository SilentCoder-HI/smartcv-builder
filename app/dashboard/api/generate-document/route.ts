import type { NextRequest } from "next/server";

export const runtime = "nodejs"; // ensures Node runtime for Buffer

export async function POST(req: NextRequest) {
  let browser: any = null;
  try {
    // 1. Parse JSON body
    const { html } = await req.json();

    if (!html) {
      return new Response(
        JSON.stringify({ error: "Missing HTML content" }),
        { status: 400 }
      );
    }

    // 2. Use Puppeteer to render HTML to PDF
    // Dynamically import puppeteer to avoid issues in edge runtimes
    const puppeteer = await import("puppeteer");

    browser = await puppeteer.default.launch({
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
      headless: true
    });
    const page = await browser.newPage();

    // Set content
    await page.setContent(html, { waitUntil: "networkidle0" });


    const headerTemplate = `
  <div style="width:100%; font-size:10px; color:#666; padding:6px 20px; display:flex; justify-content:space-between; align-items:center;">
    <div style="display:flex; align-items:center; gap:6px;">
      <span>MyCVs Export</span>
    </div>
    <div>
      <span>Generated: <span class="date"></span></span>
    </div>
  </div>
  <hr style="border:none;border-top:1px solid #eee;margin:4px 0 0 0;">
`;
    const footerTemplate = `
<hr style="border:none;border-top:1px solid #eee;margin:0 0 4px 0;">
<div style="width:100%; font-size:10px; color:#666; padding:6px 20px; display:flex; justify-content:space-between; align-items:center;">
  <div style="display:flex; align-items:center; gap:6px;">
    <span>&copy; ${new Date().getFullYear()} MyCVs</span>
  </div>
  <div>
    Page <span class="pageNumber"></span> of <span class="totalPages"></span>
  </div>
</div>
`;


    // Generate PDF (A4 by default) with header and footer
    let pdfBuffer = await page.pdf({
      format: "A4",
      margin: { top: 60, right: 0, bottom: 40, left: 0 },
      displayHeaderFooter: true,
      headerTemplate,
      footerTemplate,
      printBackground: true, // important!
    });

    await page.close();
    await browser.close();

    // 3. Add PDF metadata using pdf-lib
    const { PDFDocument } = await import("pdf-lib");
    const pdfDoc = await PDFDocument.load(pdfBuffer);

    // Set metadata according to app/(main)/layout.tsx
    pdfDoc.setTitle("SmartCV Builder | AI-Powered Resume Builder");
    pdfDoc.setAuthor("SilentCoder-HI");
    // pdfDoc.setSubject("Exported CV/Resume PDF");
    pdfDoc.setCreator("SmartCV Builder App");
    pdfDoc.setProducer("SmartCV Builder App");
    pdfDoc.setCreationDate(new Date());
    pdfDoc.setModificationDate(new Date());

    const finalPdfBuffer = Buffer.from(await pdfDoc.save());

    // 4. Return PDF response
    // Respond as application/octet-stream, send raw buffer
    return new Response(finalPdfBuffer, {
      status: 200,
      headers: {
        "Content-Type": "application/octet-stream",
        // Optionally, you can still include Content-Disposition for filename hint
        "Content-Disposition": 'inline; filename="SmartCV.pdf"; name="SmartCV Resume PDF"',
        "Content-Length": finalPdfBuffer.length.toString(),
        "X-File-Description": "Generated by SmartCV Builder",
        "X-Website": "https://yourwebsite.com"
      }
    });
  } catch (error: any) {
    if (browser) {
      try { await browser.close(); } catch { }
    }
    return new Response(
      JSON.stringify({ error: error?.message || "Failed to generate PDF" }),
      { status: 500 }
    );
  }
}
